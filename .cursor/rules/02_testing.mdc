---
description: Testing Standards for FastAPI projects
globs: test_*.py
---
# Testing Standards

## Core Principles
- Test behaviour, not implementation.
- Prefer integration tests over isolated unit tests. Testing multiple units together in a functional way
- Mock external dependencies only, at the lowest level (e.g. database operations. API calls, etc).
- Prioritise clarity and readability.
- Follow Given-When-Then pattern with inline comments

## Test Cases
- **Happy Path**: Ensure that valid data produces expected responses and database state.
- **Error Cases**: Cover invalid input (400), resource not found (404), server errors (500) and dependency failures e.g. database failures

## Best Practices
- **Organisation**: Group tests by endpoint or operation.
- **Naming**: Use descriptive test names (e.g. `test_operation_scenario_expected`).
- **Fixtures**: Use fixtures for common test data and mocks.
- **Assertions**: Validate status codes first, then response bodies.
- **Async Testing**: Use AsyncClient for async endpoints and AsyncMock for async operations.
- **Look for existing test patterns first**:
  - Check similar test files for patterns
  - Review conftest.py for established mocking approaches
  - Reuse existing test data from test_data.py

## Mocking & Fixtures
- **Database Mocking**:  
  - Use the `mock_mongodb_operations` fixture from `conftest.py` to set up MongoDB operation mocks.
  - Example usage:
    ```python
    # Mock a find_one operation
    mock_mongodb_operations("classifications", "find_one", return_value=mock_doc)
    
    # Mock an operation with error
    mock_mongodb_operations("classifications", "insert_one", side_effect=Exception("Database error"))
    
    # Mock delete operation with count
    mock_mongodb_operations("classifications", "delete_one", deleted_count=1)
    ```

- **Schema-Based Data**:
  - Use the `create_db_document` function from `test_data.py` to generate test documents
  - Documents should include all required fields, timestamps, and ObjectId
  - Example:
    ```python
    mock_doc = create_db_document(
        name="Test Classification",
        # Add other required fields
    )
    ```

- **MongoDB Operation Support**:
  The `mock_mongodb_operations` fixture supports:
  - Common operations: `find_one`, `find`, `insert_one`, `delete_one`, `update_one`, etc.
  - Operation results: `deleted_count`, `modified_count`, `matched_count`, `inserted_id`
  - Error simulation via `side_effect`
  - Cursor operations for `find` (with `to_list`)

- **Best Practices**:
  1. ALWAYS use `mock_mongodb_operations` instead of direct mock setup
  2. Mock at collection operation level (e.g., "classifications", "find_one")
  3. Include proper result objects (e.g., deleted_count for delete operations)
  4. Reference `test_classifications.py` for comprehensive examples

- ## Test Data Management**:
  1. ALL test data should be in test_data.py
  2. ALWAYS check test_data.py for existing fixtures first
  3. Add new fixtures to test_data.py, not in test files

## Tools & Frameworks
- **pytest** with **pytest-asyncio** for async tests.
- **pytest-cov** for coverage (minimum 80%).
- **httpx** AsyncClient for async HTTP testing.
- FastAPI's **TestClient** for synchronous tests.

## FastAPI Testing Guidelines
- Configure TestClient/AsyncClient with the correct `base_url` and manage lifespan events.
- Override dependency providers (not the implementations) and reset overrides between tests.
- Validate responses against both status codes and Pydantic models.

## Test Directory Structure
```bash
tests/
├── conftest.py   # Fixtures and configuration
├── integration/  # Integration tests
├── unit/         # Unit tests   
└── utils/        # Utility functions
```
